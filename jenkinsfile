pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        TF_VAR_aws_region = 'us-east-1'
        TF_VAR_environment = 'production'
        TF_VAR_project_name = 'nginx-web-site'
        TF_VAR_aws_account_id = '833371734412'
    }

    stages {
        stage('Check Terraform') {
            steps {
                sh '''
                    echo "üîç Verificando instala√ß√£o do Terraform..."
                    which terraform || echo "Terraform n√£o encontrado no PATH"
                    terraform --version || echo "Comando terraform n√£o funciona"
                    echo "üìÅ Listando arquivos do projeto..."
                    ls -la
                    ls -la terraform/ 2>/dev/null || echo "Diret√≥rio terraform n√£o encontrado"
                '''
            }
        }
        
        stage('Terraform Init') {
            when {
                expression {
                    return sh(script: 'which terraform', returnStatus: true) == 0
                }
            }
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform') {
                        sh '''
                            echo "üîß Inicializando Terraform..."
                            terraform init
                            echo "‚úÖ Terraform inicializado!"
                        '''
                    }
                }
            }
        }
        
        stage('Terraform Plan') {
            when {
                expression {
                    return sh(script: 'which terraform', returnStatus: true) == 0
                }
            }
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform') {
                        sh '''
                            echo "üìã Executando Terraform Plan..."
                            terraform plan
                            echo "‚úÖ Terraform Plan conclu√≠do!"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success { echo '‚úÖ Teste do Terraform conclu√≠do com sucesso!' }
        failure { echo '‚ùå Teste do Terraform falhou!' }
    }
}