pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-1'
        ECR_REGISTRY = '833371734412.dkr.ecr.us-east-1.amazonaws.com'
        ECR_REPOSITORY = 'nginx-web-site'
        IMAGE_TAG = 'v1'
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }
        stage('Build Docker') {
            steps { 
                sh 'docker build -t $ECR_REPOSITORY:$IMAGE_TAG .'
                sh 'docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'
            }
        }
        stage('Login to AWS ECR') {
            steps {
                withCredentials([
                    aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
                    '''
                }
            }
        }
        stage('Test Docker Image') {
            steps {
                sh '''
                    docker run --rm -d --name test-nginx $ECR_REPOSITORY:$IMAGE_TAG
                    sleep 5
                    CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' test-nginx)
                    curl -f http://$CONTAINER_IP || (docker logs test-nginx && docker stop test-nginx && exit 1)
                    docker stop test-nginx
                '''
            }
        }
        stage('Push to ECR') {
            steps {
                sh 'docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'
            }
        }
    }
    post {
        success {
            echo 'Pipeline executado com sucesso!'
        }
        failure {
            echo 'Pipeline falhou!'
        }
        always {
            sh 'docker rmi $ECR_REPOSITORY:$IMAGE_TAG || true'
            sh 'docker rmi $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG || true'
        }
    }
}