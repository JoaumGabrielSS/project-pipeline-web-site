pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '833371734412'
        ECR_REGISTRY = '833371734412.dkr.ecr.us-east-1.amazonaws.com'
        ECR_REPOSITORY = 'nginx-web-site'
        
        TF_VAR_aws_region = 'us-east-1'
        TF_VAR_environment = 'dev'
        TF_VAR_project_name = 'nginx-web-site'
        TF_VAR_aws_account_id = '833371734412'
    }

    stages {
        stage('Destroy Confirmation') {
            steps {
                script {
                    echo "WARNING: This pipeline will DESTROY all infrastructure!"
                    echo "Resources to be removed:"
                    echo "   ECS Cluster: nginx-web-site-cluster"
                    echo "   ECS Service: nginx-web-site-task-service-b2igefhw"
                    echo "   ECR Repository: nginx-web-site (and all images)"
                    echo "   IAM Roles: ecsTaskExecutionRole, ecsTaskRole"
                    echo "   CloudWatch Logs: /ecs/nginx-web-site"
                    echo ""
                    echo "THIS ACTION IS IRREVERSIBLE!"
                    echo "ALL DATA WILL BE LOST!"
                    echo ""
                    
                    def userInput = input(
                        message: 'Are you sure you want to DESTROY all infrastructure?',
                        parameters: [
                            choice(
                                name: 'CONFIRMACAO',
                                choices: ['NO - Cancel', 'YES - Destroy all'],
                                description: 'Confirm your choice'
                            ),
                            string(
                                name: 'CONFIRM_TEXT',
                                defaultValue: '',
                                description: 'Type "DESTROY" to confirm (case sensitive)'
                            )
                        ],
                        submitterParameter: 'APPROVER'
                    )
                    
                    if (userInput.CONFIRMACAO != 'YES - Destroy all') {
                        error "Destruction cancelled by user"
                    }
                    
                    if (userInput.CONFIRM_TEXT != 'DESTROY') {
                        error "Incorrect confirmation text. Type exactly: DESTROY"
                    }
                    
                    echo "Confirmation received from: ${userInput.APPROVER}"
                    echo "Starting destruction process..."
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo "Checking project files..."
                sh 'ls -la'
                sh 'ls -la terraform/ || echo "Terraform directory not found"'
            }
        }
        
        stage('Terraform Init') {
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform') {
                        sh '''
                            echo "Initializing Terraform..."
                            terraform --version
                            terraform init
                            echo "Terraform initialized!"
                        '''
                    }
                }
            }
        }
        
        stage('Check Current State') {
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform') {
                        sh '''
                            echo "Checking current infrastructure state..."
                            terraform refresh
                            echo ""
                            echo "Current resources:"
                            terraform show || echo "No resources found"
                            echo ""
                            echo "Current outputs:"
                            terraform output || echo "No outputs found"
                        '''
                    }
                }
            }
        }
        
        stage('Terraform Destroy Plan') {
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform') {
                        sh '''
                            echo "Creating destroy plan..."
                            terraform plan -destroy -out=destroy.tfplan
                            echo "Destroy plan created!"
                            echo ""
                            echo "Resources to be destroyed are listed above"
                        '''
                    }
                }
            }
        }
        
        stage('Final Confirmation') {
            steps {
                script {
                    echo "LAST CHANCE TO CANCEL!"
                    echo "After this point, destruction will be executed automatically"
                    echo ""
                    
                    input message: 'FINAL CONFIRMATION: Execute destruction now?', 
                          ok: 'DESTROY NOW',
                          submitterParameter: 'FINAL_APPROVER'
                    
                    echo "Final confirmation received from: ${env.FINAL_APPROVER}"
                    echo "Starting destruction..."
                }
            }
        }
        
        stage('Clean ECR Repository') {
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        echo "Cleaning ECR images..."
                        
                        if aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --region ${AWS_REGION} >/dev/null 2>&1; then
                            echo "ECR repository found, listing images..."
                            
                            IMAGE_IDS=$(aws ecr list-images --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION} --query 'imageIds[*]' --output json)
                            
                            if [ "$IMAGE_IDS" != "[]" ]; then
                                echo "Images found, removing..."
                                aws ecr batch-delete-image --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION} --image-ids "$IMAGE_IDS"
                                echo "Images removed from ECR"
                            else
                                echo "No images found in repository"
                            fi
                        else
                            echo "ECR repository not found or already removed"
                        fi
                    '''
                }
            }
        }
        
        stage('Terraform Destroy') {
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform') {
                        sh '''
                            echo "Executing infrastructure destruction..."
                            echo "This process may take several minutes..."
                            
                            terraform apply destroy.tfplan
                            
                            echo "Destruction completed!"
                            echo ""
                            echo "Checking if any resources remain..."
                            terraform show || echo "No remaining resources - destruction complete!"
                        '''
                    }
                }
            }
        }
        
        stage('Final Verification') {
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        echo "Final verification of AWS resources..."
                        echo ""
                        
                        echo "Checking ECS Clusters:"
                        aws ecs list-clusters --region ${AWS_REGION} --query 'clusterArns[?contains(@, `nginx-web-site`)]' || echo "No clusters found"
                        echo ""
                        
                        echo "Checking ECR Repositories:"
                        aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --region ${AWS_REGION} 2>/dev/null || echo "ECR repository removed"
                        echo ""
                        
                        echo "Checking IAM Roles:"
                        aws iam get-role --role-name ecsTaskExecutionRole 2>/dev/null || echo "Role ecsTaskExecutionRole removed"
                        aws iam get-role --role-name ecsTaskRole 2>/dev/null || echo "Role ecsTaskRole removed"
                        echo ""
                        
                        echo "Checking CloudWatch Log Groups:"
                        aws logs describe-log-groups --log-group-name-prefix "/ecs/nginx-web-site" --region ${AWS_REGION} --query 'logGroups[*].logGroupName' 2>/dev/null || echo "Log groups removed"
                        echo ""
                        
                        echo "DESTRUCTION COMPLETE!"
                        echo "All resources have been successfully removed"
                        echo "AWS costs stopped"
                        echo ""
                        echo "To recreate infrastructure, run the main pipeline"
                    '''
                }
            }
        }
    }
    
    post {
        success { 
            echo "DESTRUCTION EXECUTED SUCCESSFULLY!"
            echo "All AWS resources have been removed"
            echo "Costs stopped"
            echo ""
            echo "Summary:"
            echo "   ECS Cluster: Removed"
            echo "   ECS Service: Removed" 
            echo "   ECR Repository: Removed"
            echo "   IAM Roles: Removed"
            echo "   CloudWatch Logs: Removed"
            echo ""
            echo "To recreate, run the main deploy pipeline"
        }
        failure { 
            echo "DESTRUCTION FAILED!"
            echo "Some resources may still exist in AWS"
            echo "Check manually in AWS console:"
            echo "   ECS: https://console.aws.amazon.com/ecs/"
            echo "   ECR: https://console.aws.amazon.com/ecr/"
            echo "   IAM: https://console.aws.amazon.com/iam/"
            echo "   CloudWatch: https://console.aws.amazon.com/cloudwatch/"
            echo ""
            echo "Run the pipeline again or remove manually"
        }
        cleanup {
            sh '''
                echo "Cleaning temporary files..."
                rm -f terraform/destroy.tfplan || true
                echo "Cleanup completed"
            '''
        }
    }
}