pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPOSITORY = 'nginx-web-site'
        
        TF_VAR_aws_region = 'us-east-1'
        TF_VAR_environment = 'dev'
        TF_VAR_project_name = 'nginx-web-site'
        TF_VAR_aws_account_id = '833371734412'
    }

    stages {
        stage('Fast Destruction') {
            steps {
                script {
                    echo "FAST DESTRUCTION MODE"
                    echo "This pipeline removes EVERYTHING without extra confirmations"
                    
                    input message: 'DESTROY EVERYTHING NOW?', 
                          ok: 'YES, DESTROY',
                          submitterParameter: 'DESTROYER'
                    
                    echo "Authorized by: ${env.DESTROYER}"
                }
            }
        }
        
        stage('Clean ECR') {
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        echo "Removing ECR images..."
                        aws ecr list-images --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION} --query 'imageIds[*]' --output json > images.json || echo "Repo does not exist"
                        if [ -s images.json ] && [ "$(cat images.json)" != "[]" ]; then
                            aws ecr batch-delete-image --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION} --image-ids file://images.json
                        fi
                        rm -f images.json
                    '''
                }
            }
        }
        
        stage('Terraform Destroy') {
            steps {
                withCredentials([aws(credentialsId: 'aws-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform') {
                        sh '''
                            echo "Destroying infrastructure..."
                            terraform init
                            terraform destroy --auto-approve
                            echo "Destruction complete!"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success { echo "DESTROYED SUCCESSFULLY!" }
        failure { echo "Destruction failed - check manually" }
    }
}